#CMAKE最小版本要求,可修改
#CMAKE_BUILD_TYPE=release,debug  UNIT_TEST=true,false
CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

PROJECT("comex")
SET(COMEX_MAJOR_VERSION 1)
SET(COMEX_MINOR_VERSION 2)
SET(COMEX_PATCH_VERSION 0)

MESSAGE("CMAKE_SYSTEM_VERSION: ${CMAKE_SYSTEM_VERSION}")
MESSAGE("CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE("CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
MESSAGE("CMAKE_SYSTEM: ${CMAKE_SYSTEM}")
MESSAGE("CMAKE_LIBRARY_ARCHITECTURE: ${CMAKE_LIBRARY_ARCHITECTURE}")

IF (MSVC)
  ADD_DEFINITIONS("-DWIN32_LEAN_AND_MEAN")
  ADD_DEFINITIONS("-DLIBARCHIVE_STATIC")
  ADD_DEFINITIONS("-DLIBMOSQUITTO_STATIC")
  ADD_DEFINITIONS("-DPODOFO_STATIC")
  ADD_DEFINITIONS("-D_WIN32_WINNT=${CMAKE_WIN32_WINNT}")
ENDIF()

IF ("${UNIT_TEST}" STREQUAL "true")
  ADD_DEFINITIONS("-DUNIT_TEST")
ENDIF()

IF ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  ADD_DEFINITIONS("-D__DEBUG__")
  IF (MSVC)
    ADD_COMPILE_OPTIONS( /MDd)
  ELSE()
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
  ENDIF()
ELSE()
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")
  IF (MSVC)
    ADD_COMPILE_OPTIONS( /MD)
  ENDIF()
ENDIF()

set(CMAKE_CXX_STANDARD 17)

#-Woverloaded-virtual
#C/C++文件编译选项,无需修改
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -std=c99 -fwrapv")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")

IF (NOT APPLE)
  IF (UNIX)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wl,--copy-dt-needed-entries -fPIC -fvisibility=hidden -Wl,-Bsymbolic -Wl,--exclude-libs,ALL")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,--copy-dt-needed-entries -fPIC -fvisibility=hidden -Wl,-Bsymbolic -Wl,--exclude-libs,ALL")
  ENDIF()
ENDIF()

IF (APPLE)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -fvisibility=hidden -framework SystemConfiguration -framework Foundation -framework CoreFoundation -Wl,-hidden-lcrypto -Wl,-hidden-lssl -Wl,-hidden-lz -Wl,-hidden-lbz2 -Wl,-hidden-ltar -Wl,-hidden-lzip -Wl,-hidden-larchive -Wl,-hidden-lsmb2 -Wl,-hidden-lnfs -Wl,-hidden-lcurl -Wl,-hidden-lwebsockets -Wl,-hidden-lmosquitto -Wl,-x")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fvisibility=hidden -framework SystemConfiguration -framework Foundation -framework CoreFoundation -Wl,-hidden-lcrypto -Wl,-hidden-lssl -Wl,-hidden-lz -Wl,-hidden-lbz2 -Wl,-hidden-ltar -Wl,-hidden-lzip -Wl,-hidden-larchive -Wl,-hidden-lsmb2 -Wl,-hidden-lnfs -Wl,-hidden-lcurl -Wl,-hidden-lwebsockets -Wl,-hidden-lmosquitto -Wl,-x")
ENDIF()

find_package(mosquitto REQUIRED)
find_package(CURL REQUIRED)
find_package(LibArchive REQUIRED)
find_package(cairo REQUIRED)
find_package(libuv REQUIRED)
find_package(libzip REQUIRED)
find_package(libqrencode REQUIRED)
find_package(podofo REQUIRED)
find_package(BZip2 REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(libsmb2 REQUIRED)
find_package(libnfs REQUIRED)
find_package(Iconv REQUIRED)
find_package(JPEG REQUIRED)
find_package(libmagic REQUIRED)

#头文件搜索路径,可修改
INCLUDE_DIRECTORIES(
    ${PROJECT_SOURCE_DIR}/src
    ${PROJECT_SOURCE_DIR}/src/export
    ${PROJECT_SOURCE_DIR}/../libcom/src/export
)

#库文件搜索路径,可修改
LINK_DIRECTORIES(
    ${PROJECT_SOURCE_DIR}
    ${PROJECT_SOURCE_DIR}/../libcom/out
)


#依赖库,无需修改,静态库的依赖顺序为依赖的库写在后面
IF (UNIX OR APPLE)
find_package(libtar)
SET(PROJECT_LIB
    ${PROJECT_LIB}
    com
    pthread
    dl
    m
	libtar::libtar
)
ELSE()
ADD_COMPILE_OPTIONS( /W3 /wd4819 /wd4251 /wd4200 /wd4996)
SET(PROJECT_LIB
    ${PROJECT_LIB}
    com.lib
    msvcrt.lib
    shlwapi.lib
    Crypt32.lib
)
ENDIF()

SET(PROJECT_LIB
    ${PROJECT_LIB}
	libzip::zip
	libqrencode::libqrencode 
	CURL::libcurl 
	mosquitto::mosquitto 
	openssl::openssl 
	LibArchive::LibArchive 
	libnfs::libnfs 
	uv 
	Iconv::Iconv 
	cairo::cairo
	podofo::podofo
	BZip2::BZip2
	libsmb2::libsmb2
	libmagic::libmagic
	Iconv::Iconv
	JPEG::JPEG
)

AUX_SOURCE_DIRECTORY(./src PROJECT_SRC)
IF ("${UNIT_TEST}" STREQUAL "true")
  AUX_SOURCE_DIRECTORY(./src/test PROJECT_SRC)
ENDIF()

SET(CMAKE_SKIP_BUILD_RPATH FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
IF ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  SET(CMAKE_INSTALL_RPATH "$ORIGIN:$ORIGIN/lib:$ORIGIN/../../libcom/out")
ELSE()
  SET(CMAKE_INSTALL_RPATH "$ORIGIN:$ORIGIN/lib:$ORIGIN/../../libcom/out")
ENDIF()

SET(CPACK_GENERATOR TGZ)
SET(CMAKE_INSTALL_PREFIX ${PROJECT_SOURCE_DIR}/out/export/)
SET(CMAKE_INSTALL_CONFIG_NAME ${CMAKE_BUILD_TYPE})
SET(CPACK_PACKAGE_VERSION ${COMEX_MAJOR_VERSION}.${COMEX_MINOR_VERSION}.${COMEX_PATCH_VERSION})
SET(CPACK_PACKAGE_VERSION_MAJOR ${COMEX_MAJOR_VERSION})
SET(CPACK_PACKAGE_VERSION_MINOR ${COMEX_MINOR_VERSION})
SET(CPACK_PACKAGE_VERSION_PATCH ${COMEX_PATCH_VERSION})
SET(CPACK_PACKAGE_FILE_NAME ${CMAKE_PROJECT_NAME}_${CPACK_PACKAGE_VERSION}_${CMAKE_SYSTEM_NAME}_${CMAKE_SYSTEM_PROCESSOR}_${CMAKE_BUILD_TYPE})
SET(CPACK_PACKAGE_DIRECTORY ${PROJECT_SOURCE_DIR}/out)
SET(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)
SET(CPACK_ARCHIVE_THREADS 0)
INCLUDE(CPack)

#无需改动
IF (MSVC)
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${PROJECT_SOURCE_DIR}/out)
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/out)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG   ${PROJECT_SOURCE_DIR}/out)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/out)
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG   ${PROJECT_SOURCE_DIR}/out)
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/out)
ENDIF()

IF ("${UNIT_TEST}" STREQUAL "true")
  SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/out)
  ADD_EXECUTABLE(${PROJECT_NAME} ${PROJECT_SRC})
  IF(MSVC)
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINK_FLAGS "/NODEFAULTLIB:LIBCMT /NODEFAULTLIB:MSVCRT /INCREMENTAL:NO /LTCG")
  ENDIF()
  INSTALL(TARGETS ${PROJECT_NAME} DESTINATION bin COMPONENT dev)
  TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_LIB})
ELSE()
  IF (UNIX OR APPLE)
    SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/out)
  ENDIF()
  
  ADD_LIBRARY(${PROJECT_NAME}_static STATIC ${PROJECT_SRC})
  IF(MSVC)
    SET_TARGET_PROPERTIES(${PROJECT_NAME}_static PROPERTIES OUTPUT_NAME ${PROJECT_NAME}_static LINK_FLAGS "/NODEFAULTLIB:LIBCMT /NODEFAULTLIB:MSVCRT /INCREMENTAL:NO /LTCG")
  ELSE()
    SET_TARGET_PROPERTIES(${PROJECT_NAME}_static PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
  ENDIF()
  SET_TARGET_PROPERTIES(${PROJECT_NAME}_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)
  
  ADD_LIBRARY(${PROJECT_NAME} SHARED ${PROJECT_SRC})
  SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
  SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES CLEAN_DIRECT_OUTPUT 1)
  INSTALL(TARGETS ${PROJECT_NAME} DESTINATION lib COMPONENT dev)
  INSTALL(TARGETS ${PROJECT_NAME}_static DESTINATION lib COMPONENT dev)
  TARGET_LINK_LIBRARIES(${PROJECT_NAME}_static ${PROJECT_LIB})
  TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_LIB})
ENDIF()

FILE(GLOB LIBS_3RD ${PROJECT_SOURCE_DIR}/out/lib/*.a ${PROJECT_SOURCE_DIR}/out/lib/*.lib ${PROJECT_SOURCE_DIR}/out/lib/*.dll)
INSTALL(FILES ${LIBS_3RD} DESTINATION lib COMPONENT dev)
#INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/out/include/ DESTINATION include COMPONENT dev)
INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/export/ DESTINATION include COMPONENT dev)
